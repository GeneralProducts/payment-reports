c
hash
row
row.empty?
row.zero?
c
row.empty?
row.zero?
c
row.zero?
row.empty?
row
exit
row
row.zero?
row.empty?
c
row.empty?
row.zero?
c
row.zero?
row.empty?
row
c
@hash.values[1]
@hash.values
@hash.values.third
exit
end
b
vb
c
cc
c
cc
c
cc
c
 @default_currency
currency
@default_currency == currency
c
hash.values.compact
hash.values
hash
c
hash.values
row
row.zero?
row.empty?
row
          row = Row.new(
            hash,
            forex_rate,
            @options[:currency],
            source(file),
            @options[:invoice_date]
          )
c
hash
c
input_sheet.first(2)
input_sheet.methods
input_sheet[1]
input_sheet.second
input_sheet.last
input_sheet.first
input_sheet
exit
 Roo::Excelx.new("fixtures/temp.xlsx")
exit
 Roo::Excel.new(file).sheet(0).cell(1,1)
 Roo::Excel.new(file).sheet(0).cell(0)
 Roo::Excel.new(file).sheet(0)
input_sheet
input_sheetinput_sheet
input_sheet
forex
c
file
c
file.nil?
file
c
exit
Dir.glob('files/*.xls') {|d| puts d}
Dir.glob('files/*.xls') do |file|c
file
exit
["", nil].include? @hash.values.first
@hash.values.first
@hash.values.first.nonzero?
@hash.values.first.exists?
@hash.values.first.any?
@hash.values.first.present?
@hash.values.first
[""].an
@hash.values.any?
@hash.values.compact(&:any?)
@hash.values.compact.all?(&:any?)
@hash.values.compact.all?(&:empty?)
@hash.values.compact
@hash.values
@hash
c
exit
"LSI" if @file.match?  /sales_comp/i
"Amazon" if @file.match?  /DigitalEBooksPaymentReport/i
name
name == "Amazon"
name
c
exit
@file.match? /DigitalEBooksPaymentReport/i
@file =~ /DigitalEBooksPaymentReport/i
@file
name
exit
eixt
    [quantity.to_f, returns_qty.to_f, original_sales_value.to_f, original_returns_value.to_f].sum.zero?
    arr = [quantity.to_f, returns_qty.to_f, original_sales_value.to_f, original_returns_value.to_f].sum
    arr = [quantity.to_f, returns_qty.to_f, original_sales_value.to_f, original_returns_value.to_f].compact.sum
    arr = [quantity.to_f, returns_qty.to_f, original_sales_value.to_f, original_returns_value.to_f].compact
    arr = [quantity.to_f, returns_qty.to_f, original_sales_value.to_f, original_returns_value.to_f].compact.reject(&:empty?)
    arr = [quantity, returns_qty, original_sales_value, original_returns_value].compact&.sum
    arr = [quantity, returns_qty, original_sales_value, original_returns_value].compact.sum
    arr = [quantity, returns_qty, original_sales_value, original_returns_value].compact
    arr = [quantity, returns_qty, original_sales_value, original_returns_value].compact.reject(&:empty?)
    arr = [quantity, returns_qty, original_sales_value, original_returns_value].compact.sum
    arr = [quantity, returns_qty, original_sales_value, original_returns_value].compact
    arr = [quantity, returns_qty, original_sales_value, original_returns_value].compact.reject(&:empty?)
[quantity returns_qty original_sales_value original_returns_value].compact.reject(&:empty?)
%w[quantity returns_qty original_sales_value original_returns_value].compact.reject(&:empty?)
w
exit
exot
c
row = Row.new(hash, nil, options[:currency])
=> 103:       row = Row.new(hash, nil, options[:currency])
hash
exit
cc
c
exit
c
@hash[:value].to_f
c
@hash[:list_price_currency]
@default_currency
list_price_currency
@hash[:list_price]
c
list_price_currency
row.list_price
exit
Date.strptime('04/01/2020', '%m/%d/%Y').strftime('%Y-%m-%d')
Date.strptime('04/01/2020', '%m/%d/%Y')
Date.strptime('04/01/2020', '%Y-%m-%d')
Date.strptime('2001-02-03', '%Y-%m-%d')
Date._strptime('2001-02-03', '%Y-%m-%d')
DateTime.strptime('04/01/2020')
Date.strptime('04/01/2020')
Date.parse('04/01/2020')
Date.parse('04/01/2020').strftime('%Y-%m-%d')
Date.parse('01/04/2020').strftime('%Y-%m-%d')
Date.parse(@hash[:sales_date]).strftime('%Y-%m-%d')
c
Date.parse(@hash[:sales_date])
Date.new(@hash[:sales_date])
Date.new(@hash[:sales_date]).strftime("%Y-%b-%d")
@hash[:sales_date]
exit
@forex_provided?
exit
@forex_provided?
c
@forex_provided?
!!@forex_rate
@forex_rate.present?
@forex_rate
forex_provided?@forex_rate
forex_provided?
in_default_currency?
not_in_default_currency?
exit
hash.values
hash
exit
  ) do |hash, idx|
    currency: /Payment Amount Currency|Valuta betalingsbedrag (Payment Amount Currency)/i
    value: /Payment Amount|Te betalen bedrag (Payment Amount)/i,
    quantity: /Net Units|Netto-eenheden (Net Units)/i,
    list_price: /RRP|Catalogusprijs (List Price)/i,
    sales_date: /Invoice Date|Factuurdatum (Invoice Date)/i,
    isbn: /Digital ISBN|ISBN numÃ©rique (Digital ISBN)|Digitale ISBN (Digital ISBN)/i,
  raw_input_sheet.each_with_index(
raw_input_sheet.first
raw_input_sheet
exit
["Foreign Exchange Rate","Wisselkoers (Forex Rate)"]
%w["Foreign Exchange Rate","Wisselkoers (Forex Rate)"]
%w[ Foreign Exchange Rate,Wisselkoers (Forex Rate)]
   82:       ]
   81:         Wisselkoers (Forex Rate)
=> 80:         Foreign Exchange Rate,
%w[
c
ec
forex_header
forex_header[0]
c
    forex_cell = input_sheet.cell( forex_header[0].row + 1, forex_header[0].column)
 input_sheet.cell(46,3)
 input_sheet.cell(3,46)
forex_header[0].row
forex_header[0].column
raw_input_sheet.cell( forex_header[0].column, forex_header[0].row)
 input_sheet.cell(1,1)
raw_input_sheet.cell( forex_header[0].column, forex_header[0].row)
 input_sheet.cell( forex_header[0].column, forex_header[0].row)
 input_sheet.cell( forex_header[0].column, forex_header[0].row + 1)
forex_header[0].row + 1
 forex_header[0].column
input_sheet.cell( forex_header[0].column, forex_header[0].row + 1)
=> 90:     forex_cell = input_sheet.cell( forex_header[0].column, forex_header[0].row + 1)
c
forex_header[0].column
forex_header[0].row
forex_header
forex_header.row + 1
exit
forex_cell[0].sheet.cell(1,1)exit
forex_cell[0].row
forex_cell[0]
forex_cell[0].coordinate
forex_cell[0].coordinates
forex_cell.coordinates
forex_cell
exit
forex_cell
cel.coordinate
exit
cell[1]
cell[0]
cell.value
cell
c
input_sheet.each_row_streaming
input_sheet.each_row_streaming.class
input_sheet.each_row_streaming(&:to_a)
input_sheet.each_row_streaming(&:flatten)
c.input_sheet.each_row_streaming
exit
input_sheet.each_row_streaming {|c| puts c[4].value}
input_sheet.each_row_streaming {|c| puts c[3].value}
input_sheet.each_row_streaming {|c| puts c[2].value}
